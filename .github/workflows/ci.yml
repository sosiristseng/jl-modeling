name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  NBCONVERT_JOBS: '4'
  LITERATE_PROC: '4'
  ALLOWERRORS: 'false'
  CACHE_NUM: '1'
  NBCACHE: '.cache'

jobs:
  execute:
    strategy:
      fail-fast: false
      matrix:
        section:
          - diffeq
          - pde
          - visual
          - ude
          - df
          - abm
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          .github
          docs/${{ matrix.section }}
    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner	}}
        password: ${{ github.token }}
    - name: Get docker image hash
      id: img
      run: echo "hash=${{ hashFiles('**/Project.toml', '**/Manifest.toml', 'env.Dockerfile', 'requirements.txt') }}" >> "$GITHUB_OUTPUT"
    - name: Build and push docker image
      env:
        IMG: ghcr.io/${{ github.repository }}:${{ steps.img.outputs.hash }}
      run: |
        docker manifest inspect ${IMG} && exit 0
        cp requirements.txt docs/${{ matrix.section }}
        docker build -f env.Dockerfile -t ${IMG} docs/${{ matrix.section }}
        docker push ${IMG}
    - name: Cache executed notebooks
      uses: actions/cache@v4
      id: cache-nb
      with:
        path: ${{ env.NBCACHE }}
        key: ${{ runner.os }}-nb-${{ env.CACHE_NUM }}-${{ steps.img.outputs.hash }}-${{ hashFiles('docs/**/*.ipynb', 'docs/**/*.jl') }}
        restore-keys: |
          ${{ runner.os }}-nb-${{ env.CACHE_NUM }}-${{ steps.img.outputs.hash }}-
    - name: Execute Notebook
      if: ${{ steps.cache-nb.outputs.cache-hit != 'true' }}
      env:
        IMG: ghcr.io/${{ github.repository }}:${{ steps.img.outputs.hash }}
      run: >
        docker run --rm -w /tmp -v ${{ github.workspace }}:/tmp
        -e PROJ_DIR=docs/${{ matrix.section }}
        -e NBCACHE=${{ env.NBCACHE }}
        -e NBCONVERT_JOBS=${{ env.NBCONVERT_JOBS }}
        -e ALLOWERRORS=${{ env.ALLOWERRORS }}
        ${{ env.IMG }}
        julia --color=yes -p ${{ env.LITERATE_PROC }} --heap-size-hint=3G run.jl
    - name: Upload Notebook
      uses: actions/upload-artifact@v4
      with:
        name: notebook-${{ matrix.section }}
        path: ${{ env.NBCACHE }}
        retention-days: 1

  render:
    needs: execute
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download notebooks
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.NBCACHE }}/
          pattern: notebook-*
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -R ${{ env.NBCACHE }}
      - name: Copy back built notebooks
        run: cp --verbose -rf ${{ env.NBCACHE }}/docs/* docs/
      - name: Remove jl files
        run: find docs/ -type f -name "*.jl" -exec rm {} \;
      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
      - name: Render Quarto Project
        uses: quarto-dev/quarto-actions/render@v2
        with:
          to: html # If set, it will be equivalent to `quarto render --to html`
          path: docs # By default, the current working dir is used i.e `quarto render .`
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          path: _site/

  # CI conclusion for GitHub status check
  # Adaped from https://brunoscheufler.com/blog/2022-04-09-the-required-github-status-check-that-wasnt
  CI:
    needs: render
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ ${{ needs.render.result }} == "success" ]]; then
            echo "Tests passed"
            exit 0
          else
            echo "Tests failed"
            exit 1
          fi

  # Deployment job
  deploy:
    name: Deploy to GitHub pages
    needs: render
    if: ${{ github.ref == 'refs/heads/main' }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write    # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
      actions: read   # to download an artifact uploaded by `actions/upload-pages-artifact@v3`
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
